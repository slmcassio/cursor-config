// Place your key bindings in this file to override the defaults
[
    // ========================================
    // TERMINAL MANAGEMENT
    // ========================================
    {
        "key": "cmd+0",
        "command": "terminal.focus"
    },
    {
        "key": "cmd+0",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+`",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "alt+f12",
        "command": "-workbench.action.terminal.toggleTerminal",
        "when": "terminal.active && terminalFocus"
    },

    // ========================================
    // EDITOR GROUP MANAGEMENT
    // ========================================
    {
        "key": "cmd+w a",
        "command": "workbench.action.closeAllEditors"
    },
    {
        "key": "cmd+w down",
        "command": "workbench.action.moveEditorToBelowGroup"
    },
    {
        "key": "cmd+w g",
        "command": "workbench.action.closeEditorsInGroup"
    },
    {
        "key": "cmd+w left",
        "command": "workbench.action.moveEditorToLeftGroup"
    },
    {
        "key": "cmd+w n",
        "command": "workbench.action.navigateEditorGroups"
    },
    {
        "key": "cmd+w o",
        "command": "workbench.action.closeOtherEditors"
    },
    {
        "key": "cmd+w r",
        "command": "workbench.action.reopenClosedEditor"
    },
    {
        "key": "cmd+w right",
        "command": "workbench.action.moveEditorToRightGroup"
    },
    {
        "key": "cmd+w up",
        "command": "workbench.action.moveEditorToAboveGroup"
    },
    {
        "key": "cmd+w w",
        "command": "workbench.action.closeActiveEditor"
    },

    // ========================================
    // NAVIGATION
    // ========================================
    {
        "key": "cmd+w i",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "cmd+w k",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "cmd+w j",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "cmd+w l",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.gotoLine"
    },
    {
        "key": "ctrl+escape",
        "command": "projectManager.listProjects"
    },

    // ========================================
    // COMPOSER/AI ASSISTANT
    // ========================================
    {
        "key": "cmd+i",
        "command": "composerMode.agent"
    },
    {
        "key": "cmd+[",
        "command": "composer.previousChatTab"
    },

    // ========================================
    // CALVA/CLOJURE BINDINGS
    // ========================================
    {
        "key": "ctrl+alt+,",
        "command": "paredit.slurpSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+.",
        "command": "paredit.barfSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+/",
        "command": "paredit.sexpRangeExpansion",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+;",
        "command": "calva.evaluateSelectionToSelectionEnd",
        "when": "calva:keybindingsEnabled && editorHasSelection && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+;",
        "command": "calva.evaluateToCursor",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasSelection && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+'",
        "command": "calva.loadFile",
        "when": "calva:keybindingsEnabled && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+\\",
        "command": "calva.clojureLsp.manage"
    },
    {
        "key": "ctrl+alt+]",
        "command": "calva.showReplMenu"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "calva.evaluateCurrentTopLevelForm",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+shift+alt+,",
        "command": "paredit.slurpSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+.",
        "command": "paredit.barfSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+/",
        "command": "paredit.sexpRangeContraction",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },

    // ========================================
    // UNBINDINGS - EDITOR ACTIONS
    // ========================================
    {
        "key": "alt+cmd+g",
        "command": "editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+z",
        "command": "-editor.action.toggleWordWrap"
    },
    {
        "key": "alt+z",
        "command": "-workbench.action.terminal.sizeToContentWidth",
        "when": "terminalFocus && terminalHasBeenCreated && terminalIsOpen || terminalFocus && terminalIsOpen && terminalProcessSupported"
    },
    {
        "key": "shift+alt+down",
        "command": "-editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "-editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "cmd+]",
        "command": "-editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },

    // ========================================
    // UNBINDINGS - WORKBENCH ACTIONS
    // ========================================
    {
        "key": "alt+cmd+p",
        "command": "-projectManager.listProjects"
    },
    {
        "key": "alt+cmd+t",
        "command": "-workbench.action.closeOtherEditors"
    },
    {
        "key": "alt+enter",
        "command": "-calva.evaluateCurrentTopLevelForm",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "alt+l",
        "command": "-editor.action.inlineDiffs.nextDiffFile",
        "when": "editorTextFocus && @inlineDiffs.nextDiffFile.hasInlineDiffsInAnyEditor"
    },
    {
        "key": "cmd+0",
        "command": "-workbench.action.focusSideBar"
    },
    {
        "key": "cmd+0",
        "command": "-workbench.actions.view.problems",
        "when": "workbench.panel.markers.view.active"
    },
    {
        "key": "cmd+2",
        "command": "-workbench.action.focusSecondEditorGroup"
    },
    {
        "key": "cmd+3",
        "command": "-workbench.action.focusThirdEditorGroup"
    },
    {
        "key": "cmd+3",
        "command": "-workbench.action.toggleSidebarVisibility",
        "when": "searchViewletVisible"
    },
    {
        "key": "cmd+3",
        "command": "-workbench.view.search",
        "when": "workbench.view.search.active && !searchViewletVisible"
    },
    {
        "key": "cmd+4",
        "command": "-workbench.action.focusFourthEditorGroup"
    },
    {
        "key": "cmd+5",
        "command": "-workbench.action.focusFifthEditorGroup"
    },
    {
        "key": "cmd+5",
        "command": "-workbench.action.toggleSidebarVisibility",
        "when": "activeViewlet == 'workbench.view.debug'"
    },
    {
        "key": "cmd+5",
        "command": "-workbench.view.debug",
        "when": "viewContainer.workbench.view.debug.enabled && activeViewlet != 'workbench.view.debug'"
    },
    {
        "key": "cmd+6",
        "command": "-workbench.action.focusSixthEditorGroup"
    },
    {
        "key": "cmd+7",
        "command": "-outline.focus"
    },
    {
        "key": "cmd+7",
        "command": "-workbench.action.focusSeventhEditorGroup"
    },
    {
        "key": "cmd+8",
        "command": "-workbench.action.focusEighthEditorGroup"
    },
    {
        "key": "cmd+9",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "cmd+9",
        "command": "-workbench.action.toggleSidebarVisibility",
        "when": "activeViewlet == 'workbench.view.scm'"
    },
    {
        "key": "cmd+9",
        "command": "-workbench.view.scm",
        "when": "workbench.scm.active && activeViewlet != 'workbench.view.scm'"
    },
    {
        "key": "cmd+\\",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "cmd+\\",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"
    },
    {
        "key": "cmd+\\",
        "command": "-workbench.action.terminal.splitActiveTab",
        "when": "terminalProcessSupported && terminalTabsFocus"
    },
    {
        "key": "cmd+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "cmd+e",
        "command": "-workbench.action.quickOpen",
        "when": "!inQuickOpen"
    },
    {
        "key": "cmd+r cmd+w",
        "command": "-workbench.action.closeAllEditors"
    },
    {
        "key": "cmd+r down",
        "command": "-workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "cmd+r left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "cmd+r right",
        "command": "-workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "cmd+r up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "cmd+r w",
        "command": "-workbench.action.closeEditorsInGroup"
    },
    {
        "key": "cmd+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "f1",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "shift+cmd+a",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "shift+cmd+o",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "shift+cmd+t",
        "command": "-workbench.action.reopenClosedEditor"
    },
    {
        "key": "shift+cmd+x",
        "command": "-workbench.view.extensions",
        "when": "viewContainer.workbench.view.extensions.enabled"
    },

    // ========================================
    // UNBINDINGS - CALVA/CLOJURE
    // ========================================
    {
        "key": "alt+down",
        "command": "-paredit.dragSexprForward",
        "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "alt+up",
        "command": "-paredit.dragSexprBackward",
        "when": "calva:keybindingsEnabled && config.calva.paredit.hijackVSCodeDefaults && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+c ctrl+alt+r",
        "command": "-calva.showReplMenu"
    },
    {
        "key": "ctrl+alt+c ctrl+s",
        "command": "-calva.selectCurrentForm",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+c enter",
        "command": "-calva.loadFile",
        "when": "calva:keybindingsEnabled && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+cmd+up",
        "command": "-quickInput.previousSeparator",
        "when": "inQuickInput && quickInputType == 'quickPick'"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-calva.evaluateSelectionToSelectionEnd",
        "when": "calva:keybindingsEnabled && editorHasSelection && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-calva.evaluateToCursor",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasSelection && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-paredit.barfSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+o r",
        "command": "-calva.showReplWindow",
        "when": "calva:connected && calva:keybindingsEnabled && !calva:outputWindowActive"
    },
    {
        "key": "ctrl+alt+o t",
        "command": "-calva.showOutputTerminal",
        "when": "calva:keybindingsEnabled"
    },
    {
        "key": "ctrl+alt+o v",
        "command": "-calva.showReplOutputView",
        "when": "calva:keybindingsEnabled"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-paredit.slurpSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+w space",
        "command": "-paredit.rangeForDefun",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+left",
        "command": "-paredit.slurpSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+right",
        "command": "-paredit.barfSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-paredit.sexpRangeContraction",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+w",
        "command": "-paredit.sexpRangeExpansion",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },

    // ========================================
    // UNBINDINGS - OTHER
    // ========================================
    {
        "key": "ctrl+g",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "ctrl+l",
        "command": "-notebook.centerActiveCell",
        "when": "notebookEditorFocused"
    },
    {
        "key": "cmd+[",
        "command": "-composer.previousChatTab",
        "when": "composerFocused && !editorTextFocus"
    },
    {
        "key": "ctrl+alt+o r",
        "command": "-calva.showFileForOutputWindowNS",
        "when": "calva:connected && calva:keybindingsEnabled && calva:outputWindowActive"
    },
    {
        "key": "cmd+2",
        "command": "search.action.openNewEditor"
    },
    {
        "key": "cmd+3",
        "command": "search.action.openNewEditorToSide"
    },
    {
        "key": "shift+cmd+r",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "shift+cmd+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "shift+cmd+r",
        "command": "-rerunSearchEditorSearch",
        "when": "inSearchEditor"
    },
    {
        "key": "shift+cmd+f",
        "command": "-workbench.action.findInFiles"
    },
    {
        "key": "shift+cmd+f",
        "command": "-workbench.view.search",
        "when": "workbench.view.search.active && neverMatch =~ /doesNotMatch/"
    },
    {
        "key": "shift+cmd+f",
        "command": "-filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && filesExplorerFocus"
    },
    {
        "key": "shift+cmd+f",
        "command": "search.action.openNewEditor"
    },
    {
        "key": "cmd+r e",
        "command": "-workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "cmd+b",
        "command": "editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+alt+up",
        "command": "-paredit.backwardDownSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+up",
        "command": "-editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "ctrl+alt+down",
        "command": "-paredit.forwardUpSexp",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+down",
        "command": "-editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "ctrl+alt+up",
        "command": "paredit.sexpRangeExpansion",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+down",
        "command": "paredit.sexpRangeContraction",
        "when": "calva:keybindingsEnabled && editorTextFocus && !calva:cursorInComment && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+j",
        "command": "-notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+alt+k",
        "command": "paredit.barfSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+j",
        "command": "paredit.slurpSexpForward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+k",
        "command": "paredit.barfSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+j",
        "command": "paredit.slurpSexpBackward",
        "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+[",
        "command": "calva.showResultOutputDestination",
        "when": "calva:keybindingsEnabled"
    },
    {
        "key": "ctrl+alt+o o",
        "command": "-calva.showResultOutputDestination",
        "when": "calva:keybindingsEnabled"
    }
]
